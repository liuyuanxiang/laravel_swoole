<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputArgument;

class WsSwooleCommand extends Command
{
    public $serv;
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'wsswoole {action}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        //
        $option = $this->argument('action');


        switch ($option)
        {
            case "start":
                $this->info('wsswoole observer started');
                $this->start();
                break;
            case "stop":
                $this->info('stoped');
                $this->stop();
                break;
            case "restart":
                $this->info("restarted");
                $this->restart();
                break;
        }
    }
    private function start()
    {
            $this->serv=new \swoole_websocket_server('127.0.0.1',9502);
            $this->serv->set([
                'worker_num'=>1,
                'daemonize'=>false,
                'max_request'=>10000,
                'dispatch_mode'=>2,
                'debug_mode'=>1,
                'task_worker_num'=>1,
            ]);
            $handler=\App::make('App\Handlers\WsSwooleHandler');
            $this->serv->on('start',array($handler,'onStart'));
            $this->serv->on('connect',array($handler,'onConnect'));
            $this->serv->on('open',array($handler,'onOpen'));
            $this->serv->on('message',array($handler,'onMessage'));
            $this->serv->on('close',array($handler,'onClose'));
            $this->serv->on('Task',array($handler,'onTask'));
            $this->serv->on('Finish',array($handler,'onFinish'));


            $this->serv->start();
    }
    public function stop()
    {

    }
    public function restart()
    {
    }
    public function getArguments()
    {

        return [
            ['action',InputArgument::REQUIRED,'start|stop|restart']
        ];
     //   return parent::getArguments(); // TODO: Change the autogenerated stub
    }
}
