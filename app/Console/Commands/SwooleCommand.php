<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputArgument;

class SwooleCommand extends Command
{

    public $serv;
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'swoole {action} ';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        //
        $option = $this->argument('action');


        switch ($option)
        {
            case "start":
                $this->info('swoole observer started');
                $this->start();
                break;
            case "stop":
                $this->info('stoped');
                $this->stop();
                break;
            case "restart":
                $this->info("restarted");
                $this->restart();
                break;
        }
    }
    private function start()
    {

        $this->serv=new \swoole_server("127.0.0.1",9501);
        $this->serv->set([
            'worker_num'=>1,
            'daemonize'=>false,
            'max_request'=>10000,
            'dispatch_mode'=>2,
            'debug_mode'=>1
        ]);
        $handler=\App::make('App\Handlers\SwooleHandler');
        $this->serv->on('Start',array($handler,'onStart'));
        $this->serv->on('Connect',array($handler,'onConnect'));
        $this->serv->on('Receive',array($handler,'onReceive'));
        $this->serv->on('Close',array($handler,'onClose'));
        $this->serv->start();
    }

    private function stop()
    {
        $file=config('swoole.pidfile');
        if (!file_exists($file))
        {
            throw new \Exception("file not exists");
        }
        $string=file_get_contents($file);
        $string=json_decode($string,true);

        if (!empty($string))
        {
           try{
               if (!function_exists('shell_exec'))
               {
                   throw new \Exception("no support exec");
               }
               foreach ($string as $v)
               {
                   $pid='kill -9 '.$v;
                   shell_exec($pid);
               }
               unlink($file);
           }catch (\Exception $e)
           {
                $this->info('stop failed');
           }
           exit();
        }else
        {
            $this->error("no found pid");
        }
    }

    public function restart()
    {

    }

    protected function getArguments()
    {
        return [
            ['action',InputArgument::REQUIRED,'start|stop|restart']
        ];
        //return parent::getArguments(); // TODO: Change the autogenerated stub
    }


    public function fire()
    {

    }

}
